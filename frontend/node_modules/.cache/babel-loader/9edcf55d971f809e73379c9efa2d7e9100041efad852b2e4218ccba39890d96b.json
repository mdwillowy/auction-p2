{"ast":null,"code":"import axios from 'axios';\n\n// Configure base URL for all requests\naxios.defaults.baseURL = 'http://localhost:5000'; // Backend server\n\nconst API_URL = '/api/items';\nconst AUTH_URL = '/api/auth';\nconst api = {\n  getItems: async () => {\n    const fullUrl = `${axios.defaults.baseURL}${API_URL}`;\n    console.log('Making request to full URL:', fullUrl);\n    try {\n      const response = await axios.get(API_URL);\n      console.log('Response:', {\n        status: response.status,\n        data: response.data,\n        config: {\n          url: response.config.url,\n          baseURL: response.config.baseURL,\n          fullPath: `${response.config.baseURL}${response.config.url}`\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Request failed:', {\n        message: error.message,\n        config: error.config,\n        response: error.response\n      });\n      throw error;\n    }\n  },\n  getItemById: async id => {\n    return await axios.get(`${API_URL}/${id}`);\n  },\n  createItem: async data => {\n    return await axios.post(API_URL, data);\n  },\n  placeBid: async (itemId, amount) => {\n    return await axios.post(`${API_URL}/${itemId}/bid`, {\n      amount\n    }, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  },\n  login: async (email, password) => {\n    return await axios.post(`${AUTH_URL}/login`, {\n      email,\n      password\n    });\n  },\n  register: async (username, email, password) => {\n    return await axios.post(`${AUTH_URL}/register`, {\n      username,\n      email,\n      password\n    });\n  },\n  getCurrentUser: async () => {\n    return await axios.get(`${AUTH_URL}/me`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","defaults","baseURL","API_URL","AUTH_URL","api","getItems","fullUrl","console","log","response","get","status","data","config","url","fullPath","error","message","getItemById","id","createItem","post","placeBid","itemId","amount","headers","Authorization","localStorage","getItem","login","email","password","register","username","getCurrentUser"],"sources":["/Users/mdwillowy/Desktop/Coding/auction-P2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configure base URL for all requests\naxios.defaults.baseURL = 'http://localhost:5000'; // Backend server\n\nconst API_URL = '/api/items';\nconst AUTH_URL = '/api/auth';\n\nconst api = {\n  getItems: async () => {\n    const fullUrl = `${axios.defaults.baseURL}${API_URL}`;\n    console.log('Making request to full URL:', fullUrl);\n    try {\n      const response = await axios.get(API_URL);\n      console.log('Response:', {\n        status: response.status,\n        data: response.data,\n        config: {\n          url: response.config.url,\n          baseURL: response.config.baseURL,\n          fullPath: `${response.config.baseURL}${response.config.url}`\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Request failed:', {\n        message: error.message,\n        config: error.config,\n        response: error.response\n      });\n      throw error;\n    }\n  },\n  getItemById: async (id) => {\n    return await axios.get(`${API_URL}/${id}`);\n  },\n  createItem: async (data) => {\n    return await axios.post(API_URL, data);\n  },\n  placeBid: async (itemId, amount) => {\n    return await axios.post(`${API_URL}/${itemId}/bid`, { amount }, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  },\n  login: async (email, password) => {\n    return await axios.post(`${AUTH_URL}/login`, { email, password });\n  },\n  register: async (username, email, password) => {\n    return await axios.post(`${AUTH_URL}/register`, { username, email, password });\n  },\n  getCurrentUser: async () => {\n    return await axios.get(`${AUTH_URL}/me`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAElD,MAAMC,OAAO,GAAG,YAAY;AAC5B,MAAMC,QAAQ,GAAG,WAAW;AAE5B,MAAMC,GAAG,GAAG;EACVC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMC,OAAO,GAAG,GAAGP,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAGC,OAAO,EAAE;IACrDK,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,OAAO,CAAC;IACnD,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACR,OAAO,CAAC;MACzCK,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE;QACvBG,MAAM,EAAEF,QAAQ,CAACE,MAAM;QACvBC,IAAI,EAAEH,QAAQ,CAACG,IAAI;QACnBC,MAAM,EAAE;UACNC,GAAG,EAAEL,QAAQ,CAACI,MAAM,CAACC,GAAG;UACxBb,OAAO,EAAEQ,QAAQ,CAACI,MAAM,CAACZ,OAAO;UAChCc,QAAQ,EAAE,GAAGN,QAAQ,CAACI,MAAM,CAACZ,OAAO,GAAGQ,QAAQ,CAACI,MAAM,CAACC,GAAG;QAC5D;MACF,CAAC,CAAC;MACF,OAAOL,QAAQ;IACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,iBAAiB,EAAE;QAC/BC,OAAO,EAAED,KAAK,CAACC,OAAO;QACtBJ,MAAM,EAAEG,KAAK,CAACH,MAAM;QACpBJ,QAAQ,EAAEO,KAAK,CAACP;MAClB,CAAC,CAAC;MACF,MAAMO,KAAK;IACb;EACF,CAAC;EACDE,WAAW,EAAE,MAAOC,EAAE,IAAK;IACzB,OAAO,MAAMpB,KAAK,CAACW,GAAG,CAAC,GAAGR,OAAO,IAAIiB,EAAE,EAAE,CAAC;EAC5C,CAAC;EACDC,UAAU,EAAE,MAAOR,IAAI,IAAK;IAC1B,OAAO,MAAMb,KAAK,CAACsB,IAAI,CAACnB,OAAO,EAAEU,IAAI,CAAC;EACxC,CAAC;EACDU,QAAQ,EAAE,MAAAA,CAAOC,MAAM,EAAEC,MAAM,KAAK;IAClC,OAAO,MAAMzB,KAAK,CAACsB,IAAI,CAAC,GAAGnB,OAAO,IAAIqB,MAAM,MAAM,EAAE;MAAEC;IAAO,CAAC,EAAE;MAC9DC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;EACJ,CAAC;EACDC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,OAAO,MAAMhC,KAAK,CAACsB,IAAI,CAAC,GAAGlB,QAAQ,QAAQ,EAAE;MAAE2B,KAAK;MAAEC;IAAS,CAAC,CAAC;EACnE,CAAC;EACDC,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEH,KAAK,EAAEC,QAAQ,KAAK;IAC7C,OAAO,MAAMhC,KAAK,CAACsB,IAAI,CAAC,GAAGlB,QAAQ,WAAW,EAAE;MAAE8B,QAAQ;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;EAChF,CAAC;EACDG,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAO,MAAMnC,KAAK,CAACW,GAAG,CAAC,GAAGP,QAAQ,KAAK,EAAE;MACvCsB,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAexB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}